Index: semantics_analysis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from symbol_table import *\r\nfrom grammar_tree import *\r\n\r\n\r\nclass SemanticAnalyzer:\r\n    def __init__(self, grammar_tree, st_manager=STManager()):\r\n        self.result = True  # 分析结果，false or true\r\n        self.tree = grammar_tree  # 分析树\r\n        self.st_manager = st_manager  # 符号表操作\r\n\r\n    \"\"\"\r\n        语法分析过程中分析过的内容在此不做检查\r\n    \"\"\"\r\n\r\n    # def S(self):\r\n    #     \"\"\"\r\n    #     S -> programstruct\r\n    #     不需要进行检查\r\n    #     \"\"\"\r\n    #     current_node_id = self.tree.find_child_node(0, 0).id\r\n    #     current_node = self.tree.grammar_tree[current_node_id]  # 找到当前节点\r\n    #     self.programstruct(current_node.child[0])\r\n\r\n    def programstruct(self):\r\n        \"\"\"\r\n        programstruct -> program_head ; program_body .\r\n        不需要进行检查\r\n        \"\"\"\r\n        # current_node = self.tree.grammar_tree[node_id]\r\n        current_node_id = self.tree.grammar_tree[0].id\r\n        current_node = self.tree.grammar_tree[current_node_id]  # 找到当前节点\r\n        self.program_head(current_node.child[0])\r\n        self.program_body(current_node.child[2])\r\n\r\n    def program_head(self, node_id):\r\n        \"\"\"\r\n        program_head → program id ( idlist ){parameters=idlist;make_table('main',False,None,parameters)}\r\n        建表，将idlist插入\r\n        program_head → program id{make_table('main',False,None,[])}\r\n        建表\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        parameter_list = []\r\n        if len(current_node.child) == 2:\r\n            self.st_manager.make_table(\"main\", parameter_list, False, None)\r\n        elif len(current_node.child) == 5:\r\n            parameter_list = self.idlist(current_node.child[3])\r\n            self.st_manager.make_table(\"main\", parameter_list, False, None)\r\n        else:\r\n            self.result = False\r\n\r\n    def program_body(self, node_id):\r\n        \"\"\"\r\n        program_body → const_declarations var_declarations subprogram_declarations compound_statement\r\n        不需要检查\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        self.const_declarations(current_node.child[0])\r\n        self.var_declarations(current_node.child[1])\r\n        self.subprogram_declarations(current_node.child[2])\r\n        self.compound_statement(current_node.child[3])\r\n\r\n    def idlist(self, node_id):\r\n        \"\"\"\r\n        idlist → idlist , id{parameters.append((id.name,id.type))}\r\n        将id和idlist的返回值加入参数表\r\n        idlist → id{parameters.append((id.name,id.type))}\r\n        将id加入参数表\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        parameters = []\r\n        if len(current_node.child) == 1:\r\n            child_node = self.tree.find_child_node(node_id, 0)\r\n            parameters.append(Parameter(child_node.value, None, child_node.row, child_node.column, False))\r\n        else:\r\n            parameters.extend(self.idlist(current_node.child[0]))\r\n            child_node = self.tree.find_child_node(node_id, 2)\r\n            parameters.append(Parameter(child_node.value, None, child_node.row, child_node.column, False))\r\n        return parameters\r\n\r\n    \"\"\"\r\n        常量声明部分\r\n    \"\"\"\r\n\r\n    def const_declarations(self, node_id):\r\n        \"\"\"\r\n        const_declarations → const const_declaration ;\r\n        const_declarations → ε\r\n        不需要检查\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 3:\r\n            self.const_declaration(current_node.child[1])\r\n\r\n    def const_declaration(self, node_id):\r\n        \"\"\"\r\n        const_declaration → const_declaration ; id relop const_value{insert_item()}\r\n        const_declaration → id relop const_value{insert_item()}\r\n        将标识符id插入符号表\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 3:\r\n            id_node = self.tree.find_child_node(node_id, 0)\r\n            relop_node = self.tree.find_child_node(node_id, 1)\r\n            const_value_type = self.const_value(current_node.child[2])\r\n        else:\r\n            self.const_declaration(current_node.child[0])\r\n            id_node = self.tree.find_child_node(node_id, 2)\r\n            relop_node = self.tree.find_child_node(node_id, 3)\r\n            const_value_type = self.const_value(current_node.child[4])\r\n\r\n        if relop_node.value != '=':\r\n            print(\"语义错误：第{0}行, 第{1}列: 常量定义应使用‘=’\".format(id_node.row, id_node.column))\r\n            self.result = False\r\n            return\r\n\r\n        new_item = Item(id_node.value, \"const\", const_value_type[0],\r\n                        const_value_type[1], None, [], id_node.row, [])\r\n        if not self.st_manager.insert_item(new_item, self.st_manager.current_table_name):\r\n            print(\"语义错误：第{0}行, 第{1}列: {2}重定义或该符号表不存在\".format(id_node.row, id_node.column, id_node.value))\r\n            self.result = False\r\n\r\n    def const_value(self, node_id):\r\n        \"\"\"\r\n        const_value → addop num{const_value.type=num}\r\n        const_value → num {const_value.type=num}\r\n        const_value → ' letter '{const_value.type=char}\r\n        返回 const_value_type = (value, type)\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        const_value = None\r\n        const_type = None\r\n        if len(current_node.child) == 2:  # const_value → addop num{const_value.type=num}\r\n            addop_node = self.tree.find_child_node(node_id, 0)\r\n            num_node = self.tree.find_child_node(node_id, 1)\r\n            if addop_node.value == '+':\r\n                const_value = num_node.value\r\n            elif addop_node.value == '-':\r\n                const_value = num_node.value.__neg__()\r\n            elif addop_node.value == 'or':\r\n                print(\"语义错误：第{0}行, 第{1}列: or不能给const赋值\".format(addop_node.row, addop_node.column))\r\n                const_value_type = (None, None)\r\n                return const_value_type\r\n            if isinstance(const_value, int):\r\n                const_type = 'integer'\r\n            if isinstance(const_value, float):\r\n                const_type = 'real'\r\n        elif len(current_node.child) == 1:  # const_value → num {const_value.type=num}\r\n            num_node = self.tree.find_child_node(node_id, 0)\r\n            const_value = num_node.value\r\n            if isinstance(const_value, int):\r\n                const_type = 'integer'\r\n            if isinstance(const_value, float):\r\n                const_type = 'real'\r\n        else:  # const_value → ' letter '{const_value.type=char}\r\n            letter_node = self.tree.find_child_node(node_id, 1)\r\n            const_value = letter_node.value\r\n            const_type = 'char'\r\n        const_value_type = (const_value, const_type)\r\n        return const_value_type\r\n\r\n    \"\"\"\r\n        变量声明部分\r\n    \"\"\"\r\n\r\n    def var_declarations(self, node_id):\r\n        \"\"\"\r\n        var_declarations → var var_declaration ;\r\n        var_declarations → ε\r\n        不需要检查\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 3:\r\n            self.var_declaration(current_node.child[1])\r\n\r\n    def var_declaration(self, node_id):\r\n        \"\"\"\r\n        var_declaration → var_declaration ; idlist : type{insert_item()}\r\n        var_declaration → idlist : type{insert_item()}\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        parameter_list = []\r\n        if len(current_node.child) == 3:  # var_declaration → idlist : type{insert_item()}\r\n            parameter_list = self.idlist(current_node.child[0])\r\n            item_info = self.type(current_node.child[2])\r\n            for parameter in parameter_list:\r\n                new_item = Item(parameter.name, item_info[0], item_info[1],\r\n                                None, None, None, parameter.row, [])\r\n                if not self.st_manager.insert_item(new_item, self.st_manager.current_table_name):\r\n                    print(\"语义错误：第{0}行, 第{1}列: {2}重定义或该符号表不存在\".format(parameter.row, parameter.column, parameter.name))\r\n                    self.result = False\r\n        else:  # var_declaration → var_declaration ; idlist : type{insert_item()}\r\n            self.var_declaration(current_node.child[0])\r\n            parameter_list = self.idlist(current_node.child[2])\r\n            item_info = self.type(current_node.child[4])\r\n            for parameter in parameter_list:\r\n                new_item = Item(parameter.name, item_info[0], item_info[1],\r\n                                None, item_info[3], item_info[2][1], parameter.row, [])\r\n                if not self.st_manager.insert_item(new_item, self.st_manager.current_table_name):\r\n                    print(\"语义错误：第{0}行, 第{1}列: {2}重定义或该符号表不存在\".format(parameter.row, parameter.column, parameter.name))\r\n                    self.result = False\r\n\r\n    def type(self, node_id):\r\n        \"\"\"\r\n        type → basic_type {type.value = basic_type}\r\n        type → array [ period ] of basic_type{type.id = array;type.value = basic_type;\r\n                                            type.demension=period.demension;type.parameters=period.parameters}\r\n        返回值：item_info = [变量类型，元素类型，数组大小(size, period)，数组维数]\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        item_info = []\r\n        if len(current_node.child) == 1:\r\n            var_type = self.basic_type(current_node.child[0])\r\n            item_info = [\"var\", var_type, (None, None), None]\r\n        else:\r\n            array_period = self.period(current_node.child[2])\r\n            array_type = self.basic_type(current_node.child[5])\r\n            size = 0\r\n            for item in array_period:\r\n                size += (item[1] - item[0])\r\n            if len(array_period) > 0:\r\n                item_info = [\"array\", array_type, (size, array_period), len(array_period)]\r\n        return item_info\r\n\r\n    def basic_type(self, node_id):\r\n        \"\"\"\r\n        basic_type → integer{basic_type=integer}\r\n        basic_type → real {basic_type=real}\r\n        basic_type → boolean {basic_type=boolean}\r\n        basic_type → char{basic_type=char}\r\n        \"\"\"\r\n        # current_node = self.tree.grammar_tree[node_id]\r\n        child_node = self.tree.find_child_node(node_id, 0)\r\n        return child_node.token\r\n\r\n    def period(self, node_id):\r\n        \"\"\"\r\n        period → period ， num .. num {period.demension++;period.parameters.append()}\r\n        period → num .. num{period.demension++;period.parameters.append()}\r\n        返回值：array_period = [(下限, 上限), ]\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        array_period = []\r\n        if len(current_node.child) == 3:\r\n            num_node1 = self.tree.find_child_node(node_id, 0)\r\n            num_node2 = self.tree.find_child_node(node_id, 2)\r\n        else:\r\n            new_array_period = self.period(current_node.child[0])\r\n            if len(new_array_period) != 0:\r\n                array_period.extend(new_array_period)\r\n            num_node1 = self.tree.find_child_node(node_id, 2)\r\n            num_node2 = self.tree.find_child_node(node_id, 4)\r\n\r\n        if num_node1.value < 0 or not isinstance(num_node1.value, int):\r\n            print('语义错误：第{0}行, 第{1}列: 数组下标必须为非负整数'.format(num_node1.row, num_node1.column))  # 同时输出行，列\r\n            self.result = False\r\n            return array_period\r\n        if num_node2.value < 0 or not isinstance(num_node2.value, int):\r\n            print('语义错误：第{0}行, 第{1}列: 数组下标必须为非负整数'.format(num_node2.row, num_node2.column))  # 同时输出行，列\r\n            self.result = False\r\n            return array_period\r\n        if num_node1.value > num_node2.value:\r\n            print('语义错误：第{0}行, 第{1}列: 数组上下限错误'.format(num_node2.row, num_node2.column))  # 同时输出行，列\r\n            self.result = False\r\n            return array_period\r\n        array_period.append((num_node1.value, num_node2.value))\r\n        return array_period\r\n\r\n    \"\"\"\r\n        过程、函数声明部分\r\n    \"\"\"\r\n\r\n    def subprogram_declarations(self, node_id):\r\n        \"\"\"\r\n        subprogram_declarations → subprogram_declarations subprogram ;\r\n        subprogram_declarations → ε\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 3:\r\n            self.subprogram_declarations(current_node.child[0])\r\n            self.subprogram(current_node.child[1])\r\n\r\n    def subprogram(self, node_id):\r\n        \"\"\"\r\n        subprogram → subprogram_head ; subprogram_body\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        self.subprogram_head(current_node.child[0])\r\n        self.subprogram_body(current_node.child[2])\r\n\r\n    def subprogram_head(self, node_id):\r\n        \"\"\"\r\n        subprogram_head → procedure id formal_parameter\r\n                                    {parameters=formal_parameter.list;make_table()}\r\n        subprogram_head → function id formal_parameter : basic_type\r\n                            {parameters=formal_parameter.list;return_type=basic_type;make_table()}\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        id_node = self.tree.find_child_node(node_id, 1)\r\n        subprogram_name = id_node.value\r\n        parameters = self.formal_parameter(current_node.child[2])\r\n        if len(current_node.child) == 3:\r\n            self.st_manager.make_table(subprogram_name, parameters, False, None)\r\n            # 新建一个子表，将current_table指向新的子表\r\n        elif len(current_node.child) == 5:\r\n            return_type = self.basic_type(current_node.child[4])\r\n            self.st_manager.make_table(subprogram_name, parameters, True, return_type)\r\n            # 新建一个子表，将current_table指向新的子表\r\n\r\n    def formal_parameter(self, node_id):\r\n        \"\"\"\r\n        formal_parameter → ( parameter_list ){formal_parameter.list=parameter_list}\r\n        formal_parameter → ε{formal_parameter.list=[]}\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        parameters = []\r\n        if len(current_node.child) == 3:\r\n            parameters = self.parameter_list(current_node.child[1])\r\n        return parameters\r\n\r\n    def parameter_list(self, node_id):\r\n        \"\"\"\r\n        parameter_list → parameter_list ; parameter {parameter_list.append(parameter)}\r\n        parameter_list → parameter{parameter_list.append(parameter)}\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        parameters = []\r\n        if len(current_node.child) == 1:\r\n            new_parameters = self.parameter(current_node.child[0])\r\n            if new_parameters is not None:\r\n                parameters.extend(new_parameters)\r\n        elif len(current_node.child) == 3:\r\n            new_parameters = self.parameter_list(current_node.child[0])\r\n            if new_parameters is not None:\r\n                parameters.extend(new_parameters)\r\n            new_parameters = self.parameter(current_node.child[2])\r\n            if new_parameters is not None:\r\n                parameters.extend(new_parameters)\r\n        return parameters\r\n\r\n    def parameter(self, node_id):\r\n        \"\"\"\r\n        parameter → var_parameter{parameter=var_parameter}\r\n        parameter → value_parameter{parameter=value_parameter}\r\n        \"\"\"\r\n        # current_node = self.tree.grammar_tree[node_id]\r\n        child_node = self.tree.find_child_node(node_id, 0)\r\n        parameters = []\r\n        if child_node.token == 'var_parameter':\r\n            parameters = self.var_parameter(child_node.id)\r\n        elif child_node.token == 'value_parameter':\r\n            parameters = self.value_parameter(child_node.id)\r\n        return parameters\r\n\r\n    def var_parameter(self, node_id):\r\n        \"\"\"\r\n        var_parameter → var value_parameter\r\n                            {value_parameter.id='var';var_parameter=value_parameter}\r\n        \"\"\"\r\n        child_node = self.tree.find_child_node(node_id, 1)\r\n        parameters = self.value_parameter(child_node.id)\r\n        for i, value in enumerate(parameters):\r\n            parameters[i].vary = True\r\n        return parameters\r\n\r\n    def value_parameter(self, node_id):\r\n        \"\"\"\r\n        value_parameter → idlist : basic_type\r\n                                {idlist.type = basic_type;value_parameter=idlist}\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        parameters = self.idlist(current_node.child[0])\r\n        parameter_type = self.basic_type(current_node.child[2])\r\n        for i, value in enumerate(parameters):\r\n            parameters[i].type = parameter_type\r\n        return parameters\r\n\r\n    \"\"\"\r\n        程序体部分\r\n    \"\"\"\r\n\r\n    def subprogram_body(self, node_id):\r\n        \"\"\"\r\n        subprogram_body → const_declarations var_declarations compound_statement\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        self.const_declarations(current_node.child[0])\r\n        self.var_declarations(current_node.child[1])\r\n        self.compound_statement(current_node.child[2])\r\n\r\n    def compound_statement(self, node_id):\r\n        \"\"\"\r\n        compound_statement → begin statement_list end\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        self.statement_list(current_node.child[1])\r\n\r\n    def statement_list(self, node_id):\r\n        \"\"\"\r\n        statement_list → statement_list ; statement\r\n        statement_list → statement\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 1:\r\n            self.statement(current_node.child[0])\r\n        elif len(current_node.child) == 3:\r\n            self.statement_list(current_node.child[0])\r\n            self.statement(current_node.child[2])\r\n\r\n    def statement(self, node_id):\r\n        \"\"\"\r\n        statement → variable assignop expression {进行函数返回值检查}\r\n        statement → procedure_call\r\n        statement → compound_statement\r\n        statement → if expression then statement else_part\r\n        statement → for id assignop expression to expression do statement\r\n        statement → read ( variable_list ) {对非表达式进行search_item()}\r\n        statement → write ( expression_list ){对非表达式进行search_item()}\r\n        statement → ε\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 1:\r\n            child_node = self.tree.find_child_node(node_id, 0)\r\n            if child_node.token == \"procedure_call\":\r\n                self.procedure_call(child_node.id)\r\n            elif child_node.token == \"compound_statement\":\r\n                self.compound_statement(child_node.id)\r\n\r\n        elif len(current_node.child) == 3:\r\n            variable = self.variable(current_node.child[0])\r\n            expression = self.expression(current_node.child[3])\r\n            if len(variable) == 0 or len(expression) == 0:\r\n                return\r\n            result_item = self.st_manager.search_item(variable[0], self.st_manager.current_table_name)\r\n            if result_item is not None:\r\n                if variable[1] == \"array\":\r\n                    variable[1] = variable[4]\r\n                if variable[1] != expression[1]:\r\n                    print('语义错误：第{0}行, 第{1}列: 变量或函数类型不匹配，无法赋值'.format(variable[2], variable[3]))\r\n                    self.result = False\r\n            else:\r\n                print('语义错误：第{0}行, 第{1}列: 变量未定义'.format(variable[2], variable[3]))\r\n                self.result = False\r\n\r\n        elif len(current_node.child) == 4:  # statement → read ( variable_list ) {对非表达式进行search_item()}\r\n            # statement → write ( expression_list ){对非表达式进行search_item()}\r\n            child_node = self.tree.find_child_node(node_id, 0)\r\n            if child_node.token == \"read\":\r\n                self.variable_list(current_node.child[2])\r\n                '''\r\n                if len(variable_list) != 0:\r\n                    for item in variable_list:\r\n                        result_item = self.st_manager.search_item(item[0], self.st_manager.current_table_name)\r\n                        if result_item == None:\r\n                            print('语义错误：第{0}行, 第{1}列: 变量{2}未定义'.format(item[2], item[3], item[0]))\r\n                            self.result = False\r\n                        else:\r\n                            result_item.used_row.append(item[2])  # TODO:此处需要将修改存回\r\n                '''\r\n            elif child_node.token == \"write\":\r\n                expression_list = self.expression_list(current_node.child[2])\r\n                if len(expression_list) != 0:\r\n                    for item in expression_list:\r\n                        if item[0] != \"expression\":\r\n                            result_item = self.st_manager.search_item(item[0], self.st_manager.current_table_name)\r\n                            if result_item is None:\r\n                                print('语义错误：第{0}行, 第{1}列: 变量{2}未定义'.format(item[2], item[3], item[0]))\r\n                                self.result = False\r\n                            else:\r\n                                result_item.used_row.append(item[2])  # TODO:此处需要将修改存回\r\n\r\n        elif len(current_node.child) == 5:  # statement → if expression then statement else_part\r\n            return_type = self.expression(current_node.child[1])  # if a then b: a 应该为boolean表达式\r\n            if len(return_type) == 0:\r\n                self.result = False\r\n            elif return_type[1] != \"boolean\":\r\n                print('语义错误：第{0}行: if A then B：A 应该为布尔表达式'.format(return_type[2]))\r\n                self.result = False\r\n            self.statement(current_node.child[3])\r\n            self.else_part(current_node.child[4])\r\n\r\n        elif len(current_node.child) == 8:  # statement → for id assignop expression to expression do statement\r\n            id_node = self.tree.find_child_node(node_id, 1)\r\n            return_type1 = self.expression(current_node.child[3])  # 第一个expression\r\n            return_type2 = self.expression(current_node.child[5])  # 第二个expression\r\n            result_item = self.st_manager.search_item(id_node.value, self.st_manager.current_table_name)\r\n            if result_item is None:\r\n                print(\"语义错误：第{0}行, 第{1}列: 变量{2}未定义\".format(id_node.row, id_node.column, id_node.value))\r\n                self.result = False\r\n            elif result_item.identifier_type != 'var':\r\n                print(\"语义错误：第{0}行, 第{1}列: 不能给非变量{2}赋值\".format(id_node.row, id_node.column, id_node.value))\r\n                self.result = False\r\n            elif len(return_type1) != 0 and len(return_type2) != 0:\r\n                result_item.used_row.append(id_node.row)  # TODO:缺少存入步骤\r\n                if result_item.value_type == \"integer\" and return_type1[1] == \"integer\" \\\r\n                        and return_type2[1] == \"integer\":\r\n                    self.statement(current_node.child[7])\r\n                else:\r\n                    print('语义错误：第{0}行: for 语句中，迭代变量类型应为integer'.format(id_node.row))  # 选择id 那一行\r\n                    self.result = False\r\n            else:\r\n                print('语义错误：第{0}行: for 语句中，迭代变量类型应为integer'.format(id_node.row))\r\n                self.result = False\r\n\r\n    def variable_list(self, node_id):\r\n        \"\"\"\r\n        variable_list → variable_list , variable {variable_list.append()}\r\n        variable_list → variable{variable_list.append()}\r\n        返回id_list = [[id名，类型，行，列, 数组值的类型(不是数组，则为None)], ]\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        variable_list = []\r\n        if len(current_node.child) == 3:\r\n            variable_list = self.variable_list(current_node.child[0])\r\n        result = self.variable(current_node.child[2])\r\n        if len(result) != 0:\r\n            variable_list.append(result)\r\n        return variable_list\r\n\r\n    def variable(self, node_id):\r\n        \"\"\"\r\n        variable → id id_varpart{search_item();可能需要数组越界检查}\r\n        返回 [id名，类型，行，列, 数组值的类型(不是数组，则为None)]\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        variable = []\r\n        id_node = self.tree.find_child_node(node_id, 0)\r\n        current_item = self.st_manager.search_item(id_node.value,\r\n                                                   self.st_manager.current_table_name)\r\n        if current_item is not None:\r\n            current_item.used_row.append(id_node.row)  # TODO:缺少保存过程\r\n            index = self.id_varpart(current_node.child[1])  # TODO:如果要进行数组越界检查，需要传回表达式的值\r\n            if current_item.identifier_type == \"array\":\r\n                if isinstance(index, int):\r\n                    variable = [current_item.name, \"array\", id_node.row, id_node.column, current_item.value_type]\r\n                else:\r\n                    print(\"语义错误：第{0}行, 第{1}列: 数组下标异常\".format(id_node.row, id_node.column))\r\n                    self.result = False\r\n            elif current_item.identifier_type == \"var\" or current_item.identifier_type == \"function\":\r\n                variable = [current_item.name, current_item.value_type, id_node.row, id_node.column, None]\r\n            else:\r\n                print(\"语义错误：第{0}行, 第{1}列: 无法对非变量类型进行操作\".format(id_node.row, id_node.column))\r\n                self.result = False\r\n        else:\r\n            print(\"语义错误：第{0}行, 第{1}列: {2}未定义\".format(id_node.row, id_node.column, id_node.value))\r\n            self.result = False\r\n        return variable\r\n\r\n    def id_varpart(self, node_id):\r\n        \"\"\"\r\n        id_varpart → [ expression_list ] {id_varpart=expression_list}\r\n        id_varpart → ε\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        index = None\r\n        if len(current_node.child) == 3:\r\n            expression_list = self.expression_list(current_node.child[1])\r\n            if len(expression_list) == 1:\r\n                if expression_list[0][1] != \"integer\":\r\n                    print('语义错误：第{0}行: 数组下标应该为integer'.format(expression_list[0][2]))\r\n                    self.result = False\r\n                else:\r\n                    index = expression_list[0][5]\r\n\r\n    def procedure_call(self, node_id):\r\n        \"\"\"\r\n        procedure_call → id\r\n        procedure_call → id ( expression_list ){id=search_item();传参判定}\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        id_node = self.tree.find_child_node(node_id, 0)\r\n        result_item = self.st_manager.search_item(id_node.value, self.st_manager.current_table_name)\r\n        if result_item is None:\r\n            print('语义错误：第{0}行, 第{1}列: {2}未定义'.format(id_node.row, id_node.column, id_node.value))\r\n            self.result = False\r\n        elif result_item.identifier_type != \"procedure\" and result_item.identifier_type != \"function\":\r\n            print('语义错误：第{0}行, 第{1}列: {2}不能当作过程或者函数调用'.format(id_node.row, id_node.column, id_node.value))\r\n            self.result = False\r\n        else:\r\n            result_item.used_row.append(id_node.row)  # TODO:缺少保存过程\r\n            if len(current_node.child) == 1 and len(result_item.arguments) != 0:\r\n                print('语义错误：第{0}行, 第{1}列: 该过程或函数需要参数'.format(id_node.row, id_node.column))\r\n                self.result = False\r\n            elif len(current_node.child) == 4:\r\n                if len(result_item.arguments) != 0:\r\n                    expression_list = self.expression_list(current_node.child[2])\r\n                    if len(expression_list) != 0:\r\n                        args = []\r\n                        for item in expression_list:\r\n                            args.append(item[1])\r\n                        if not self.st_manager.complare_args(id_node.value, args):  # 判断是否参数列表的个数与类型是否符合 TODO:函数未完成\r\n                            print('语义错误：第{0}行, 第{1}列: 形参、实参不匹配'.format(id_node.row, id_node.column))\r\n                            self.result = False\r\n                    else:\r\n                        print('语义错误：第{0}行, 第{1}列: 该过程、函数需要参数'.format(id_node.row, id_node.column))\r\n                        self.result = False\r\n                else:\r\n                    print('语义错误：第{0}行, 第{1}列: 该函数或过程不需要参数'.format(id_node.row, id_node.column))\r\n                    self.result = False\r\n\r\n    def else_part(self, node_id):\r\n        \"\"\"\r\n        else_part → else statement\r\n        else_part → ε\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 2:\r\n            self.statement(current_node.child[1])\r\n\r\n    def expression_list(self, node_id):\r\n        \"\"\"\r\n        expression_list → expression_list , expression {expression_list.append()}\r\n        expression_list → expression{expression_list.append()}\r\n        返回[id, type, row, column, value] or [expression, return_type, None, None, None]\r\n        \"\"\"\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        expression_list = []\r\n        if len(current_node.child) == 3:\r\n            expression_list = self.expression_list(current_node.child[0])\r\n            result = self.expression(current_node.child[2])\r\n        else:\r\n            result = self.expression(current_node.child[0])\r\n        if len(result) != 0:\r\n            expression_list.append(self.expression(current_node.child[0]))\r\n        return expression_list\r\n\r\n    def expression(self, node_id):\r\n        \"\"\"\r\n        expression → simple_expression relop simple_expression{逻辑判断决定赋值}\r\n        expression → simple_expression{expression.type = simple_expression.type}\r\n        返回[id, type, row, column, value] or [expression, return_type, None, None, None]\r\n        \"\"\"\r\n        expression = []\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 3:\r\n            '''\r\n            检查两个simple_expression是否类型可以比较，\r\n            如果可以则返回值类型为 boolean\r\n            '''\r\n            se1 = self.simple_expression(current_node.child[0])\r\n            se2 = self.simple_expression(current_node.child[2])\r\n            relop_node = self.tree.find_child_node(node_id, 1)  # 可能有一些操作\r\n            if len(se1) != 0 and len(se2) != 0:\r\n                if se1[1] == se2[1]:\r\n                    if se1[1] == \"integer\" or se1[1] == \"real\":\r\n                        expression = [\"expression\", \"boolean\", relop_node.row, relop_node.column]  # 这里使用relop的行列\r\n                    else:\r\n                        print('语义错误：第{0}行: 类型{1}无法比较'.format(relop_node.row, se1[1]))  # 这里使用relop的行\r\n                        self.result = False\r\n                else:\r\n                    print(\"语义错误：第{0}行: 类型同，无法比较\".format(relop_node.row))  # 这里使用relop的行\r\n                    self.result = False\r\n\r\n        elif len(current_node.child) == 1:\r\n            expression = self.simple_expression(current_node.child[0])\r\n        return expression\r\n\r\n    def simple_expression(self, node_id):\r\n        \"\"\"\r\n        simple_expression → simple_expression addop term {逻辑判断决定赋值}\r\n        simple_expression → term{simple_expression.type = term.type}\r\n        返回[id, type, row, column, value] or [expression, return_type, None, None, None]\r\n        \"\"\"\r\n        simple_expression = []\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        '''\r\n        判断两个是否能够addop，\r\n        如果能simple_expression = ['expression', type, None, None]，否则，为空\r\n        可能涉及到一些类型转换，例如int转real之类的\r\n        '''\r\n        if len(current_node.child) == 3:\r\n            sub_simple_expressipon = self.simple_expression(current_node.child[0])\r\n            addop_node = self.tree.find_child_node(node_id, 1)  # 可能要用到该属性\r\n            sub_term = self.term(current_node.child[2])\r\n            if len(sub_simple_expressipon) != 0 and len(sub_term) != 0:\r\n                if sub_simple_expressipon[1] == sub_term[1]:\r\n                    if addop_node.value == 'or':\r\n                        if sub_term[1] == \"integer\" or sub_term[1] == \"boolean\":\r\n                            simple_expression = [\"expression\", sub_term[1], addop_node.row,\r\n                                                 addop_node.column]  # 这里使用addop的行，列\r\n                        else:\r\n                            print(\"语义错误：第{0}行: 类型不匹配，类型{1}无法执行or操作\".format(\r\n                                addop_node.row, sub_term[1]))  # 这里使用addop的行\r\n                            self.result = False\r\n                    else:\r\n                        if sub_term[1] == \"integer\" or sub_term[1] == \"real\":\r\n                            simple_expression = [\"expression\", sub_term[1], addop_node.row,\r\n                                                 addop_node.column]  # 这里使用addop的行，列\r\n                        else:\r\n                            print(\"语义错误：第{0}行: 类型不匹配，类型{1}无法执行{2}操作\".format(\r\n                                addop_node.row, sub_term[1], addop_node.value))  # 这里使用addop的行\r\n                            self.result = False\r\n                else:\r\n                    if addop_node.value != 'or':\r\n                        if sub_term[1] == \"integer\" and sub_simple_expressipon[1] == \"real\":\r\n                            simple_expression = [\"expression\", \"real\", addop_node.row, addop_node.column]\r\n                        elif sub_term[1] == \"real\" and sub_simple_expressipon[1] == \"integer\":\r\n                            simple_expression = [\"expression\", \"real\", addop_node.row, addop_node.column]\r\n                        else:\r\n                            print(\"语义错误：第{0}行: 类型不匹配，无法执行{1}操作\".format(\r\n                                addop_node.row, addop_node.value))  # 这里使用addop的行\r\n                            self.result = False\r\n                    else:\r\n                        print(\"语义错误：第{0}行: 类型不匹配，无法执行{1}操作\".format(\r\n                            addop_node.row, addop_node.value))  # 这里使用addop的行\r\n                        self.result = False\r\n\r\n        elif len(current_node.child) == 1:\r\n            simple_expression = self.term(current_node.child[0])\r\n        return simple_expression\r\n\r\n    def term(self, node_id):\r\n        \"\"\"\r\n        term → term mulop factor{逻辑判断决定赋值}\r\n        term → factor{term.type = factor.type}\r\n        返回[id, type, row, column, value] or [expression, return_type, None, None, None]\r\n        \"\"\"\r\n        term = []\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 3:\r\n            sub_term = self.term(current_node.child[0])\r\n            mulop_node = self.tree.find_child_node(node_id, 1)  # 可能要用到\r\n            sub_factor = self.factor(current_node.child[2])\r\n            # mulop_set = {'*', '/', 'div', 'mod', 'and'}\r\n            if len(sub_factor) != 0 and len(sub_term) != 0:\r\n                if sub_term[1] == sub_factor[1]:\r\n                    if sub_term[1] == \"integer\":\r\n                        if mulop_node.value == '/':\r\n                            term = [\"expression\", \"real\", mulop_node.row, mulop_node.column]  # 这里使用的 mulop 的行列\r\n                        elif mulop_node.value == '*' or mulop_node.value == 'div' or mulop_node == 'mod':\r\n                            term = [\"expression\", \"integer\", mulop_node.row, mulop_node.column]  # 这里使用的 mulop 的行列\r\n                        else:\r\n                            print('语义错误：第{0}行: integer类型不能进行and运算'.format(mulop_node.row))\r\n                            self.result = False\r\n                    elif sub_term[1] == \"real\":\r\n                        if mulop_node.value == '*' or mulop_node.value == '/':\r\n                            term = [\"expression\", \"real\", mulop_node.row, mulop_node.column]  # 这里使用的 mulop 的行列\r\n                        else:\r\n                            print('语义错误：第{0}行: real类型不能进行{1}运算'.format(mulop_node.row, mulop_node.value))\r\n                            self.result = False\r\n                    elif sub_term[1] == \"boolean\":\r\n                        if mulop_node.value == 'and':\r\n                            term = [\"expression\", \"boolean\", mulop_node.row, mulop_node.column]  # 这里使用的 mulop 的行列\r\n                        else:\r\n                            print('语义错误：第{0}行: boolean类型不能进行{1}运算'.format(mulop_node.row, mulop_node.value))\r\n                            self.result = False\r\n                    else:\r\n                        print('语义错误：第{0}行: char类型不能进行{1}运算'.format(mulop_node.row, mulop_node.value))\r\n                        self.result = False\r\n                else:\r\n                    '''\r\n                    判断是否能够做运算。\r\n                    如果可能，则要做强制类型转换，例如int转real\r\n                    '''\r\n                    if (sub_term[1] == \"integer\" and sub_factor[1] == \"real\") or \\\r\n                            (sub_term[1] == \"real\" and sub_factor[1] == \"integer\"):\r\n                        if mulop_node.value == '*' or mulop_node.value == '/':\r\n                            term = [\"expression\", \"real\", mulop_node.row, mulop_node.column]  # 这里使用的 mulop 的行列\r\n                        else:\r\n                            print('语义错误：第{0}行: 该类型不能进行{1}运算'.format(mulop_node.row, mulop_node.value))\r\n                            self.result = False\r\n                    else:\r\n                        print('语义错误：第{0}行: 该类型不能进行{1}运算'.format(mulop_node.row, mulop_node.value))\r\n                        self.result = False\r\n        elif len(current_node.child) == 1:\r\n            term = self.factor(current_node.child[0])\r\n        return term\r\n\r\n    def factor(self, node_id):\r\n        \"\"\"\r\n        factor → num {factor.type = num.type}\r\n        factor → variable {factor.type = variable.type}\r\n        factor → id ( expression_list ){id.type=search_item();传参判定;factor.type = id.type}\r\n        factor → ( expression ) {factor.type = expression.type}\r\n        factor → not factor {factor.type = factor1.type}\r\n        factor → uminus factor {factor.type = factor1.type}\r\n        返回[id, type, row, column, value] or [expression, return_type, None, None, None]\r\n        \"\"\"\r\n        factor = []\r\n        current_node = self.tree.grammar_tree[node_id]\r\n        if len(current_node.child) == 1:\r\n            child_node = self.tree.find_child_node(node_id, 0)\r\n            if child_node.token == \"num\":\r\n                if isinstance(current_node.value, int):\r\n                    child_type = \"integer\"\r\n                else:  # num只可能出现int、real两种类型\r\n                    child_type = \"real\"\r\n                factor = [\"expression\", child_type, child_node.row, child_node.column]\r\n            elif child_node.token == \"variable\":\r\n                variable = self.variable(child_node.id)\r\n                if len(variable) != 0:\r\n                    if variable[1] == \"array\":\r\n                        factor = [variable[0], variable[4], variable[2], variable[3]]\r\n                    else:\r\n                        factor = [variable[0], variable[1], variable[2], variable[3]]\r\n        elif len(current_node.child) == 4:\r\n            # factor → id ( expression_list ){id.type=search_item();传参判定;factor.type = id.type}\r\n            '''\r\n            检查id是否是一个函数或者过程，是否定义\r\n            如果未定义直接报错，然后直接return\r\n            还要在这里进行引用行填写\r\n            要分析expression_list的参数类型以及个数，是否符合要求\r\n            '''\r\n            id_node = self.tree.find_child_node(node_id, 0)\r\n            result_item = self.st_manager.search_item(id_node.value, self.st_manager.current_table_name)\r\n            if result_item is not None:\r\n                result_item.used_row.append(id_node.row)  # TODO:需要将result更新回符号表\r\n                if result_item.identifier_type == \"function\" or result_item.identifier_type == \"procedure\":\r\n                    expression_list = self.expression_list(current_node.child[2])\r\n                    args = []\r\n                    if len(expression_list) != 0:\r\n                        for expression in expression_list:\r\n                            args.append(expression[1])\r\n                    return_type = self.st_manager.complare_args(id_node.value, args)  # TODO:comolare_args函数未完成\r\n                    if not return_type:\r\n                        print(\"语义错误：第{0}行, 第{1}列: 参数值不匹配\".format(id_node.row, id_node.column))  # 在id行报错\r\n                        self.result = False\r\n                    else:\r\n                        factor = [\"expression\", return_type, id_node.row, id_node.column]  # 行，列是 id的行列\r\n                else:\r\n                    print(\"语义错误：第{0}行, 第{1}列: id不是一个函数或者过程\".format(id_node.row, id_node.column))  # 在id行报错\r\n                    self.result = False\r\n            else:\r\n                print(\"语义错误：第{0}行, 第{1}列: id未定义\".format(id_node.row, id_node.column))  # 在id行报错\r\n                self.result = False\r\n        elif len(current_node.child) == 3:\r\n            expression = self.expression(current_node.child[1])\r\n            if len(expression) != 0:\r\n                factor = [\"expression\", expression[1], expression[2], expression[3]]\r\n        elif len(current_node.child) == 2:\r\n            child_node = self.tree.find_child_node(node_id, 0)\r\n            if child_node.token == \"not\":\r\n                sub_factor = self.factor(current_node.child[1])\r\n                if len(sub_factor) != 0:\r\n                    if sub_factor[1] == \"boolean\" or sub_factor[1] == \"integer\":\r\n                        factor = [\"expression\", sub_factor[1], child_node.row, child_node.column]  # row,column为not的那一行\r\n                    else:\r\n                        print(\"语义错误：第{0}行, 第{1}列: {2}类型不能使用 not 运算\".format(child_node.row,\r\n                                                                           child_node.column, sub_factor[1]))\r\n                        self.result = False\r\n            elif child_node.token == \"uminus\":\r\n                sub_factor = self.factor(current_node.child[1])\r\n                if len(sub_factor) != 0:\r\n                    if sub_factor[1] == \"integer\" or sub_factor[1] == \"real\":\r\n                        factor = [\"expression\", sub_factor[1], child_node.row, child_node.column]\r\n                    else:\r\n                        print(\"语义错误：第{0}行, 第{1}列: {2}类型无法进行uminus操作\".format(child_node.row,\r\n                                                                            child_node.column, sub_factor[1]))\r\n                        self.result = False\r\n        return factor\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- semantics_analysis.py	(revision b8e5a88b1e4d09b91b7af78aca81b7bd7ed82405)
+++ semantics_analysis.py	(date 1597110426505)
@@ -428,7 +428,7 @@
 
         elif len(current_node.child) == 3:
             variable = self.variable(current_node.child[0])
-            expression = self.expression(current_node.child[3])
+            expression = self.expression(current_node.child[2])
             if len(variable) == 0 or len(expression) == 0:
                 return
             result_item = self.st_manager.search_item(variable[0], self.st_manager.current_table_name)
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from wordanalyse import word_analyse\r\nfrom grammar_analyse import grammar_analyse\r\nfrom semantics_analysis import *\r\nfrom symbol_table import *\r\n\r\nfilename=[\r\n    \"test/word_analyse_test1\", # 词法分析 用于测试数字读取\r\n    \"test/word_analyse_test2\", # 词法分析 用于测试程序段\r\n    \"test/word_analyse_test3\", # 词法分析 用于测试是否完成各种注释（含多行注释）过滤\r\n    \"test/example3.pas\",    # 3\r\n    \"test/gcd.pas\",         # 4\r\n    \"test/quicksort.pas\",   # 5\r\n    \"test/semantics_err1.pas\",  # 6\r\n    \"test/semantics_err2.pas\",  # 7\r\n    \"test/test_array.pas\",      # 8\r\n    \"test/test_const_declarations.pas\", # 9\r\n    \"test/test_for.pas\",        # 10\r\n    \"test/test_program.pas\",    # 11\r\n    \"test/test_subprogram_declarations.pas\",    # 12\r\n    \"test/test_var_addr.pas\",   # 13\r\n    \"test/test_var_declarations.pas\",   # 14\r\n    \"test/right_example.pas\",   # 15\r\n    \"test/grammar_right_1.pas\", # 16 语法测试 正例1 - 非常简单，便于测试\r\n    \"test/grammar_right_2.pas\"  # 17 语法测试 正例2 - PPT的正确代码示例\r\n]\r\n\r\nresult = word_analyse(filename[16])\r\n\r\n# for word in result:\r\n#     print(word)\r\n\r\ngrammar_tree=grammar_analyse(result)\r\n\r\n\r\nsematic = SemanticAnalyzer(grammar_tree)\r\nsematic.programstruct()\r\n\r\nsematic.st_manager.output_table_item()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision b8e5a88b1e4d09b91b7af78aca81b7bd7ed82405)
+++ main.py	(date 1597109844606)
@@ -24,7 +24,7 @@
     "test/grammar_right_2.pas"  # 17 语法测试 正例2 - PPT的正确代码示例
 ]
 
-result = word_analyse(filename[16])
+result = word_analyse(filename[17])
 
 # for word in result:
 #     print(word)
@@ -34,5 +34,3 @@
 
 sematic = SemanticAnalyzer(grammar_tree)
 sematic.programstruct()
-
-sematic.st_manager.output_table_item()
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"47122d0c-8838-4dda-af67-3985dd42e287\" name=\"Default Changelist\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/grammar_analyse.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/grammar_tree.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/example3.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/gcd.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/grammar_right_1.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/grammar_right_2.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/quicksort.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/right_example.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/semantics_err1.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/semantics_err2.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_array.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_const_declarations.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_for.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_program.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_subprogram_declarations.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_var_addr.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/test_var_declarations.pas\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/word_analyse_test1\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/word_analyse_test2\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test/word_analyse_test3\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/wordanalyse.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/analysis_tree.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/semantics_analysis.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/semantics_analysis.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/symbol_table.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/symbol_table.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"DatabaseView\">\r\n    <option name=\"SHOW_INTERMEDIATE\" value=\"true\" />\r\n    <option name=\"GROUP_DATA_SOURCES\" value=\"true\" />\r\n    <option name=\"GROUP_SCHEMA\" value=\"true\" />\r\n    <option name=\"GROUP_CONTENTS\" value=\"false\" />\r\n    <option name=\"SORT_POSITIONED\" value=\"false\" />\r\n    <option name=\"SHOW_EMPTY_GROUPS\" value=\"false\" />\r\n    <option name=\"AUTO_SCROLL_FROM_SOURCE\" value=\"false\" />\r\n    <option name=\"HIDDEN_KINDS\">\r\n      <set />\r\n    </option>\r\n    <expand />\r\n    <select />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1cRDaG6q9P9KtWvQ3UsSDJj1bzt\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"TERMINAL_CUSTOM_COMMANDS_GOT_IT\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\PycharmProjects\\compiler\" />\r\n      <recent name=\"E:\\PycharmProjects\\compiler\\venv\\Include\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Project\\PycharmProjects\\semantics-analysis\" />\r\n      <recent name=\"E:\\PycharmProjects\\compiler\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"Sematic\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"compiler\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"E:\\PycharmProjects\\compiler\\symbol_table.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"compiler\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"47122d0c-8838-4dda-af67-3985dd42e287\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1590482573716</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1590482573716</updated>\r\n      <workItem from=\"1590482587156\" duration=\"252000\" />\r\n      <workItem from=\"1590482883794\" duration=\"1237000\" />\r\n      <workItem from=\"1590495689251\" duration=\"2209000\" />\r\n      <workItem from=\"1590498429032\" duration=\"1645000\" />\r\n      <workItem from=\"1590566266581\" duration=\"6296000\" />\r\n      <workItem from=\"1590574414809\" duration=\"12684000\" />\r\n      <workItem from=\"1590653645173\" duration=\"17862000\" />\r\n      <workItem from=\"1590709441340\" duration=\"191000\" />\r\n      <workItem from=\"1590725512157\" duration=\"205000\" />\r\n      <workItem from=\"1590726973406\" duration=\"3001000\" />\r\n      <workItem from=\"1593561454862\" duration=\"2844000\" />\r\n      <workItem from=\"1593819547559\" duration=\"5986000\" />\r\n      <workItem from=\"1593904215622\" duration=\"6331000\" />\r\n      <workItem from=\"1593992755338\" duration=\"7741000\" />\r\n      <workItem from=\"1594080358763\" duration=\"6145000\" />\r\n      <workItem from=\"1594169094693\" duration=\"4170000\" />\r\n      <workItem from=\"1594252236202\" duration=\"8118000\" />\r\n      <workItem from=\"1594337962743\" duration=\"5457000\" />\r\n      <workItem from=\"1594448023653\" duration=\"601000\" />\r\n      <workItem from=\"1594458502152\" duration=\"844000\" />\r\n      <workItem from=\"1594462009799\" duration=\"506000\" />\r\n      <workItem from=\"1594469586715\" duration=\"45000\" />\r\n      <workItem from=\"1594514875182\" duration=\"4631000\" />\r\n      <workItem from=\"1594600960295\" duration=\"5072000\" />\r\n      <workItem from=\"1594607553825\" duration=\"899000\" />\r\n      <workItem from=\"1594687948476\" duration=\"4448000\" />\r\n      <workItem from=\"1594774799493\" duration=\"3558000\" />\r\n      <workItem from=\"1594860530871\" duration=\"2492000\" />\r\n      <workItem from=\"1594863057823\" duration=\"1589000\" />\r\n      <workItem from=\"1594865032102\" duration=\"4000\" />\r\n      <workItem from=\"1594947517201\" duration=\"2862000\" />\r\n      <workItem from=\"1595052363719\" duration=\"3400000\" />\r\n      <workItem from=\"1596125499234\" duration=\"7297000\" />\r\n      <workItem from=\"1596287982044\" duration=\"937000\" />\r\n      <workItem from=\"1596450211113\" duration=\"3272000\" />\r\n      <workItem from=\"1596627942763\" duration=\"606000\" />\r\n      <workItem from=\"1597019184654\" duration=\"313000\" />\r\n      <workItem from=\"1597019535321\" duration=\"2490000\" />\r\n      <workItem from=\"1597024290596\" duration=\"703000\" />\r\n      <workItem from=\"1597045650413\" duration=\"498000\" />\r\n      <workItem from=\"1597062558350\" duration=\"2480000\" />\r\n      <workItem from=\"1597065216193\" duration=\"84000\" />\r\n      <workItem from=\"1597065701408\" duration=\"2883000\" />\r\n      <workItem from=\"1597106117068\" duration=\"21000\" />\r\n      <workItem from=\"1597109134585\" duration=\"311000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"增加了变量声明部分的符号表建立操作\">\r\n      <created>1594260792066</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594260792066</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"增加了过程及函数声明部分的符号表建立操作\">\r\n      <created>1594342381577</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594342381577</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"对程序体的逻辑进行了梳理，目前的程序体函数是无法使用的\">\r\n      <created>1594519681307</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594519681307</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"基本完成了term及factor函数的编写\">\r\n      <created>1594692642278</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594692642278</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"基本完成了有关expression函数的实现\">\r\n      <created>1594780498387</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594780498387</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"基本完成了除条件判断之外的其他函数\">\r\n      <created>1594864603991</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594864603991</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"基本完成了所有函数，后续会进行检查及补充未进行的语义错误分析\">\r\n      <created>1594950156524</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594950156524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"修改了符号表引入的错误\">\r\n      <created>1594950339435</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1594950339435</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"修改了符号表引入的错误\">\r\n      <created>1596132889708</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1596132889708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"修改了符号表\">\r\n      <created>1596133105917</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1596133105917</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"11\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.py\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"增加了变量声明部分的符号表建立操作\" />\r\n    <MESSAGE value=\"增加了过程及函数声明部分的符号表建立操作\" />\r\n    <MESSAGE value=\"对程序体的逻辑进行了梳理，目前的程序体函数是无法使用的\" />\r\n    <MESSAGE value=\"基本完成了term及factor函数的编写\" />\r\n    <MESSAGE value=\"基本完成了有关expression函数的实现\" />\r\n    <MESSAGE value=\"基本完成了除条件判断之外的其他函数\" />\r\n    <MESSAGE value=\"基本完成了所有函数，后续会进行检查及补充未进行的语义错误分析\" />\r\n    <MESSAGE value=\"修改了符号表引入的错误\" />\r\n    <MESSAGE value=\"修改了符号表\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"修改了符号表\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"561\" y=\"291\" key=\"#Scopes\" timestamp=\"1596453161326\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"561\" y=\"291\" key=\"#Scopes/0.0.1536.864@0.0.1536.864\" timestamp=\"1596453161326\" />\r\n    <state x=\"223\" y=\"87\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1597109341276\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"223\" y=\"87\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1536.864@0.0.1536.864\" timestamp=\"1597109341276\" />\r\n    <state x=\"549\" y=\"174\" key=\"FileChooserDialogImpl\" timestamp=\"1597106141102\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"549\" y=\"166\" key=\"FileChooserDialogImpl/0.0.1536.824@0.0.1536.824\" timestamp=\"1594448461327\" />\r\n    <state x=\"549\" y=\"174\" key=\"FileChooserDialogImpl/0.0.1536.864@0.0.1536.864\" timestamp=\"1597106141102\" />\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1597109470058\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.bottom/0.0.1536.864@0.0.1536.864\" timestamp=\"1597109470058\" />\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.center\" timestamp=\"1597109470058\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.center/0.0.1536.864@0.0.1536.864\" timestamp=\"1597109470058\" />\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.left\" timestamp=\"1597109470058\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.left/0.0.1536.864@0.0.1536.864\" timestamp=\"1597109470058\" />\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.right\" timestamp=\"1597109470058\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"347\" key=\"GridCell.Tab.0.right/0.0.1536.864@0.0.1536.864\" timestamp=\"1597109470058\" />\r\n    <state x=\"387\" y=\"157\" width=\"996\" height=\"707\" key=\"SettingsEditor\" timestamp=\"1594863128496\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"270\" y=\"57\" key=\"SettingsEditor/0.0.1536.824@0.0.1536.824\" timestamp=\"1594469598801\" />\r\n    <state x=\"387\" y=\"157\" width=\"996\" height=\"707\" key=\"SettingsEditor/0.0.1536.864@0.0.1536.864\" timestamp=\"1594863128496\" />\r\n    <state width=\"498\" height=\"446\" key=\"SwitcherDM\" timestamp=\"1595054185821\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state width=\"498\" height=\"446\" key=\"SwitcherDM/0.0.1536.864@0.0.1536.864\" timestamp=\"1595054185821\" />\r\n    <state x=\"211\" y=\"395\" width=\"409\" height=\"202\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1597019688085\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"211\" y=\"395\" width=\"409\" height=\"202\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1536.864@0.0.1536.864\" timestamp=\"1597019688085\" />\r\n    <state x=\"718\" y=\"117\" width=\"746\" height=\"843\" key=\"dock-window-1\" timestamp=\"1597064872557\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"718\" y=\"117\" width=\"746\" height=\"843\" key=\"dock-window-1/0.0.1536.864@0.0.1536.864\" timestamp=\"1597064872557\" />\r\n    <state x=\"565\" y=\"479\" width=\"672\" height=\"520\" key=\"search.everywhere.popup\" timestamp=\"1597109292244\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"864\" />\r\n    </state>\r\n    <state x=\"565\" y=\"479\" width=\"672\" height=\"520\" key=\"search.everywhere.popup/0.0.1536.864@0.0.1536.864\" timestamp=\"1597109292244\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/semantics_analysis$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1597109461255\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision b8e5a88b1e4d09b91b7af78aca81b7bd7ed82405)
+++ .idea/workspace.xml	(date 1597319551515)
@@ -19,33 +19,10 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="47122d0c-8838-4dda-af67-3985dd42e287" name="Default Changelist" comment="">
-      <change afterPath="$PROJECT_DIR$/grammar_analyse.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/grammar_tree.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/example3.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/gcd.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/grammar_right_1.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/grammar_right_2.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/quicksort.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/right_example.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/semantics_err1.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/semantics_err2.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_array.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_const_declarations.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_for.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_program.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_subprogram_declarations.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_var_addr.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/test_var_declarations.pas" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/word_analyse_test1" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/word_analyse_test2" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test/word_analyse_test3" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/wordanalyse.py" afterDir="false" />
+    <list default="true" id="47122d0c-8838-4dda-af67-3985dd42e287" name="Default Changelist" comment="对代码进行了整合，目前在符号表操作部分发现了bug，比如output_table_item()方法会报错">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/analysis_tree.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/semantics_analysis.py" beforeDir="false" afterPath="$PROJECT_DIR$/semantics_analysis.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/symbol_table.py" beforeDir="false" afterPath="$PROJECT_DIR$/symbol_table.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -211,7 +188,7 @@
       <workItem from="1597065216193" duration="84000" />
       <workItem from="1597065701408" duration="2883000" />
       <workItem from="1597106117068" duration="21000" />
-      <workItem from="1597109134585" duration="311000" />
+      <workItem from="1597109134585" duration="1519000" />
     </task>
     <task id="LOCAL-00001" summary="增加了变量声明部分的符号表建立操作">
       <created>1594260792066</created>
@@ -283,7 +260,14 @@
       <option name="project" value="LOCAL" />
       <updated>1596133105917</updated>
     </task>
-    <option name="localTasksCounter" value="11" />
+    <task id="LOCAL-00011" summary="对代码进行了整合，目前在符号表操作部分发现了bug，比如output_table_item()方法会报错">
+      <created>1597109701446</created>
+      <option name="number" value="00011" />
+      <option name="presentableId" value="LOCAL-00011" />
+      <option name="project" value="LOCAL" />
+      <updated>1597109701446</updated>
+    </task>
+    <option name="localTasksCounter" value="12" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -315,7 +299,8 @@
     <MESSAGE value="基本完成了所有函数，后续会进行检查及补充未进行的语义错误分析" />
     <MESSAGE value="修改了符号表引入的错误" />
     <MESSAGE value="修改了符号表" />
-    <option name="LAST_COMMIT_MESSAGE" value="修改了符号表" />
+    <MESSAGE value="对代码进行了整合，目前在符号表操作部分发现了bug，比如output_table_item()方法会报错" />
+    <option name="LAST_COMMIT_MESSAGE" value="对代码进行了整合，目前在符号表操作部分发现了bug，比如output_table_item()方法会报错" />
   </component>
   <component name="WindowStateProjectService">
     <state x="561" y="291" key="#Scopes" timestamp="1596453161326">
@@ -331,22 +316,22 @@
     </state>
     <state x="549" y="166" key="FileChooserDialogImpl/0.0.1536.824@0.0.1536.824" timestamp="1594448461327" />
     <state x="549" y="174" key="FileChooserDialogImpl/0.0.1536.864@0.0.1536.864" timestamp="1597106141102" />
-    <state width="1493" height="347" key="GridCell.Tab.0.bottom" timestamp="1597109470058">
+    <state width="1493" height="273" key="GridCell.Tab.0.bottom" timestamp="1597110666131">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
-    <state width="1493" height="347" key="GridCell.Tab.0.bottom/0.0.1536.864@0.0.1536.864" timestamp="1597109470058" />
-    <state width="1493" height="347" key="GridCell.Tab.0.center" timestamp="1597109470058">
+    <state width="1493" height="273" key="GridCell.Tab.0.bottom/0.0.1536.864@0.0.1536.864" timestamp="1597110666131" />
+    <state width="1493" height="273" key="GridCell.Tab.0.center" timestamp="1597110666131">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
-    <state width="1493" height="347" key="GridCell.Tab.0.center/0.0.1536.864@0.0.1536.864" timestamp="1597109470058" />
-    <state width="1493" height="347" key="GridCell.Tab.0.left" timestamp="1597109470058">
+    <state width="1493" height="273" key="GridCell.Tab.0.center/0.0.1536.864@0.0.1536.864" timestamp="1597110666131" />
+    <state width="1493" height="273" key="GridCell.Tab.0.left" timestamp="1597110666130">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
-    <state width="1493" height="347" key="GridCell.Tab.0.left/0.0.1536.864@0.0.1536.864" timestamp="1597109470058" />
-    <state width="1493" height="347" key="GridCell.Tab.0.right" timestamp="1597109470058">
+    <state width="1493" height="273" key="GridCell.Tab.0.left/0.0.1536.864@0.0.1536.864" timestamp="1597110666130" />
+    <state width="1493" height="273" key="GridCell.Tab.0.right" timestamp="1597110666131">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
-    <state width="1493" height="347" key="GridCell.Tab.0.right/0.0.1536.864@0.0.1536.864" timestamp="1597109470058" />
+    <state width="1493" height="273" key="GridCell.Tab.0.right/0.0.1536.864@0.0.1536.864" timestamp="1597110666131" />
     <state x="387" y="157" width="996" height="707" key="SettingsEditor" timestamp="1594863128496">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
@@ -360,16 +345,16 @@
       <screen x="0" y="0" width="1536" height="864" />
     </state>
     <state x="211" y="395" width="409" height="202" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1536.864@0.0.1536.864" timestamp="1597019688085" />
-    <state x="718" y="117" width="746" height="843" key="dock-window-1" timestamp="1597064872557">
+    <state x="0" y="106" width="572" height="633" key="dock-window-1" timestamp="1597110373843">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
-    <state x="718" y="117" width="746" height="843" key="dock-window-1/0.0.1536.864@0.0.1536.864" timestamp="1597064872557" />
+    <state x="0" y="106" width="572" height="633" key="dock-window-1/0.0.1536.864@0.0.1536.864" timestamp="1597110373843" />
     <state x="565" y="479" width="672" height="520" key="search.everywhere.popup" timestamp="1597109292244">
       <screen x="0" y="0" width="1536" height="864" />
     </state>
     <state x="565" y="479" width="672" height="520" key="search.everywhere.popup/0.0.1536.864@0.0.1536.864" timestamp="1597109292244" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/semantics_analysis$main.coverage" NAME="main Coverage Results" MODIFIED="1597109461255" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/semantics_analysis$main.coverage" NAME="main Coverage Results" MODIFIED="1597110360034" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
